name: Build & Deploy Microservices to EC2

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, room-service, video-chat-service]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Detect Changes for Service
        id: detect
        run: |
          git fetch origin main --depth=2
          CHANGED=false
          if ! git diff --quiet HEAD^ HEAD -- backend/${{ matrix.service }}; then
            CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Cache Docker Layers
        if: steps.detect.outputs.changed == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-${{ matrix.service }}
          key: ${{ runner.os }}-docker-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-${{ matrix.service }}-

      - name: Build & Push Docker Image
        if: steps.detect.outputs.changed == 'true'
        run: |
          IMAGE_NAME="tushar03dev/connectify-backend:${{ matrix.service }}"
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache-${{ matrix.service }} \
            --cache-to=type=local,dest=/tmp/.buildx-cache-${{ matrix.service }}-new,mode=max \
            -t $IMAGE_NAME ./backend/${{ matrix.service }}
          docker push $IMAGE_NAME
          rm -rf /tmp/.buildx-cache-${{ matrix.service }}
          mv /tmp/.buildx-cache-${{ matrix.service }}-new /tmp/.buildx-cache-${{ matrix.service }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            docker compose pull
            docker compose down
            docker compose up -d
            docker image prune -af
          EOF